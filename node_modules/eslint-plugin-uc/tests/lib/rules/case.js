const rule = require('../../../lib/rules/case');
const RuleTester = require('eslint').RuleTester;
const ruleTester = new RuleTester();


ruleTester.run('case', rule, {

  valid: [
    {
      code: 'function camelCase(){};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'function camelcase(){};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'let camelCase = function(){};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'let camelcase = function(){};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'let camelCase = () => {};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'let camelcase = () => {};',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const PascalCase = require("some_module");',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const _ = require("lodash");',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const Pascalcase = require("Some-Module").someProp;',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const SomeServiceClient = Singleton.SomeService',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const SOME_NUMBER_CONST = 123',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const SOME_NUMBER_CONST = {testKey:"a"}',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'const SOME_STRING_CONST = "some-string"',
      parserOptions: { ecmaVersion: 2018 }
    },
    {
      code: 'let someVar={newFunc: () => 1}',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: 'let someVar={newFunc: function() {return 1}}',
      parserOptions: { ecmaVersion: 2020 }
    },
    {
      code: "const CUSTOM_RECHARGE_DISABLED_CATEGORIES = ['tutors_booking_l3'];",
      parserOptions: { ecmaVersion: 2020 }
    }
  ],

  invalid: [
    {
      code: 'function CamelCase(){};',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'function camel_case(){};',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'let CamelCase = function(){}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'let CamelCase = () => {}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'let camel_case = function(){}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'let camel_case = () => {}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Function name should be camelCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'const someServiceClient = Singleton.SomeService',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Singletons should be PasacalCase',
        type: 'Identifier'
      }]
    },
    {
      code: 'const some_number_constant = 123',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Unscoped literal constants should be CAPS',
        type: 'Identifier'
      }]
    },
    {
      code: 'const someStringConstant = "some-string"',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Unscoped literal constants should be CAPS',
        type: 'Identifier'
      }]
    },
    {
      code: 'const SomeStringConstant = "some-string"',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Unscoped literal constants should be CAPS',
        type: 'Identifier'
      }]
    },
    {
      code: 'let someVar={new_func: () => 1}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Object Keys having function as values should be camelCase.',
        type: 'Identifier'
      }]
    },
    {
      code: 'let someVar={new_func: function() { return 1;}}',
      parserOptions: { ecmaVersion: 2020 },
      errors: [{
        message: 'Object Keys having function as values should be camelCase.',
        type: 'Identifier'
      }]
    }
  ]
});
